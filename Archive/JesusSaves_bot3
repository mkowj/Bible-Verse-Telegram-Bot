#Background
import logging
import random
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# Copied (06Apr19 1837)
#Settled
def start(update, context):
    update.message.reply_text(
        'Feeling low? Please talk to me!\n'
        '/love or /inspiraton?')

def love(update, context):
    love_verses = ['hello','stupid','gene'
    ]
    love_random = random.choice(love_verses)
    update.message.reply_text(
    '', love_random
    )

def inspiration(update, context):
    inspiration_verses = [
    ]
    inspiration_random = random.choice(inspiration_verses)
    update.message.reply_text(
    '', inspiraton_random
    )

#Settled
def help(update, context):
    update.message.reply_text('Only through Yahweh, boy!')

#Settled
def echo(update, context):
    """Echo the user message."""
    update.message.reply_text(update.message.text)

#Settled(?)
def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    updater = Updater("864560514:AAEQ8TO2VBu2_KpFVd_myp-d1TFf75CbZMI", use_context=True)

    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("love", love))
    dp.add_handler(CommandHandler("inspiration", inspiration))

    # on noncommand i.e message - echo the message on Telegram
    dp.add_handler(MessageHandler(Filters.text, echo))

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
